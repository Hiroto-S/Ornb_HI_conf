#+OPTIONS: ^:{}
#+LANGUAGE:  jp
#+OPTIONS:  toc:nil  timestamp:nil

#+LaTeX_HEADER: \usepackage{url}

#+DATE:

* abstract
  At graduate research,
  although the process is more important than the results,
  most students don't notice it.
  Because the apprenticeship is suitable to learn the process,
  the graduate reseach enforces a kind of
  relationship between
  a master and a padawan learner.
  On this project,
  we are developing a system for
  noticing importance of learning process,
  ornb, whose specifications and
  the cooperation to a static web system, Jekyll.

* Introduction
** ゼミナール
卒業研究などのゼミナール(以下、ゼミ)は，フンボルト理念を基礎としているとされる．
その通説を潮木は次のようにまとめている．
#+begin_quote
近代大学の出発点は1810年に創設されたベルリン大学である。この大学の基本構想を作ったのは、ヴィルヘルム・フォン・フンボルトであり、近代大学はこのフンボルト理念から始まった。フンボルト理念の中核は研究中心主義にある。つまり、大学は教育の場である以上に研究の場であるという考え方は、このフンボルトから始まった。これがドイツばかりでなく、世界の大学を変えた。
\cite{Ushiogi_column}
#+end_quote
と. また，「大学が伝えるべきことは，
いかにして新たな知識を発見するか，いかにして知識を進歩させるか，
そのための技法である」との観点から，「研究する学生」
を志向したとしている\cite{Ushiogi}．

今日の学生が，このような深遠な思想を理解して，
長い受動的学習の最終段階として，ゼミに参加している気概は
感じられない．
また、最新の「教育」を行うと看板を掲げている大学に通う今日の学生は，
大学は「研究の場である」という認識はなく，
卒業研究や，研究室におけるゼミへの参加に
どのようなスタンスで取り組むべきか迷っている．
研究のための予備知識，スキルの習得に役立つとして課されている
レポートや試験などは，
新しい発見につながる途中経過を求めているにもかかわらず，
既存の知識の暗記という結果のみを求めているという誤ったメッセージとして受け取られている可能性がある．
実践的な課題を，project based learning \cite{Bell}
やactive learningとして取り入れる試みがなされているが，
\cite{Settles}，\cite{溝上}
かける時間の割に，成果をあげるのが難しいとされている

「研究する学生」を育てるには，個人に適合した指導が欠かせない．
これはある意味，メンターとメンティ，あるいは
マスターとパダワンのような関係となる．
しかし，ゼミへやってくる学生は，
研究指導が徒弟制的な制度であるとは全く予想していない．

** 目的
次節で示す通り，このような旧態然とした徒弟制も現代的な視点で
見直しが進められている．
本プロジェクトで提供しようとするシステムornbは，
- 研究室は徒弟制
- 学生はそれを知らない
という前提のもとで，徒弟制を現代的で新たな学習形態として提供することを
目的としている．

次節では，どのような経緯で徒弟制が見直されて来たか，また，
学習がAM/PMという視点によってどのように捉えられているかを
明らかにする．
その上で，近代的な徒弟制を研究室活動に導入するのに
必要となる仕様を洗い出し，それに基づいた実装デザインを示す．

* 徒弟制の見直し
** 状況に埋め込まれた学習
1991年にレイヴとウェンガーによって，
  「状況に埋め込まれた学習」あるいは「正統的周辺参加」
  という学習形態・概念が提案された\cite{LaveWenger}.
  彼らは，アフリカの仕立て職人や助産婦の育成法を社会学的に詳しく調査した結果，
  徒弟制のなかに学びの本質があると指摘した．
少し複雑ではあるが，その概念をもっとも短くまとめたと思われる箇所を以下にそのまま書き写す．
#+begin_quote
学習はいわば参加という枠組で生じる過程であり，
個人の頭の中でではないのである．
このことは，とりもなおさず，
共同参加者の間での異なった見え方の違いによって学習が媒介されるということである．
この定義では「学ぶ」のは共同体である，
あるいは少なくとも，
学習の流れ(context)に参加している人たち，といえよう．
学習はいわば，共同参加者間にわかち持たれているのであり，
一人の人間の行為ではない．
生産過程では徒弟(見習い)が益々増大していく
参加によってきわめてドラマティックに変容していくものではあるが，
この変容の発生の場と発生の条件は，さらに広範囲の過程そのものである．
徒弟の親方たち自身が共同学習者としてふるまうことを通しどれほど変化するか，
したがって，習熟されている技能でもその過程でどれほど変化するか．
実践者の共同体がより大きくなると，
徒弟の形成によって共同体は自らを再生させるが，
同時に変容もすると考えられる．
\cite{LaveWenger}[pp.8-9]

中略

また新参者を親方，ボス，あるいは管理者と深く対立する関係に陥らせる，参加させるよりも非自発的に隷従させるなど，これらの条件は実践における学習の可能性を部分的に，もしくは完全に，歪めてしまうと唱えた．
\cite{LaveWenger}[p.42]
#+end_quote
と記している．


** AM/PM
1998年数学者のSfardは，レイヴとウェンガーの考えを受け，
学習者，教授者，研究者の知識に対する心持ちを
AM(Acquisition Metaphor)とPM(Participation Metaphor)と
名付けて分類した\cite{Sfard}．
表[[table:AM/PM]]に示した通り，
学習に対する従来の考え方であるAMは，個人が知識を習得することを目標とし，
「学習」とは何かを獲得することであった．
また，「知る」とは個人が所有するものであるとしていた．
一方で学習に対する新しい考えであるPMは，学習の目標は共同体の構築であり，
「学習」とは参加者となることである．

本プロジェクトでは、学習者は，徒弟であり，教授者は，熟練した参加者と定義した．
個人ではなく，教授者，学習者が共同体（チーム）として，
また徒弟制を築くことでお互いの知識構築がはかどる仕組みを目指した．

#+CAPTION: Acquisition metaphorとParticipation metaphorの比較\cite[Table Iを和訳]{Sfard}．
#+NAME: table:AM/PM
#+ATTR_LaTeX: :align lll
#+ATTR_LaTeX: :placement [bt]
|------------------------+------------------+----------------------------------------------|
| Acquisition metaphor   | 要素             | Participation metaphor                       |
|------------------------+------------------+----------------------------------------------|
| 個人を豊かにする       | 学習の目標       | 共同体の構築                                 |
| 何かを獲得する         | 学習するとは     | 参加者となる                                 |
| 受容者，再構築者       | 学習者           | 周辺参加者，徒弟                             |
| 供給者，促進者，仲裁人 | 教授者           | 熟練した参加者, 実践や論考の修得者                                       |
| 資産，所有物，一般商品 | 知識，コンセプト | 実践，論考，活動の一側面                     |
| 持つ，所有する         | 知るとは         | 所属する，参加する，コミュニケーションをとる |
|------------------------+------------------+----------------------------------------------|

** PMの実践例と学生の受け止め方
このような徒弟制の見直しは，単なる概念として語られるだけでなく，
実践としてシステム化されつつある.
イギリスの一部の大学では2015年にDegree Apprenticeshipsという
徒弟制度を取り入れた実践的技能を身につける
教育形態が開始されている\cite{DegreeApprenticeship}．
*** ペア評価の意図
関西学院大学理工学部・情報科学科で
西谷が，PM，すなわち参加型学習の試みとして
数式処理演習で実践している．
学生は好きなもの同士がペアを組み，
授業中課題や期末試験をペアで受け，
ペアの点数は全く同じとなる．
ペアで「相方の足を引っ張らないように」
という思考に至り，
互いが怠けることなく，
授業や課題に意欲的に取り組む．
その結果，互いに高め合い，知識の定着につながる．
この授業への取り組みの根底にあるのが，「共同体の構築・参加」であり、
PMの実践を意図している．
しかし，実際には知識の定着に至らない学生が多数いる．

*** 学生の見え方
その原因は次のとおりである．
- ペアによる演習のため，
  一人が作業すれば課題をクリアできる点である．
  つまり，問題毎に役割を振り分け
  片方が問題を解いている時，
  もう片方は携帯を見るなど考える事を
  完全にやめることがある．
  一緒に考えることをせず，
  「休憩」の時間を作ることで
  知識定着を目的とするのではなく，
  課題達成，単位習得の事のみを考えた結果である．

- ペアで課題を一つ提出することが，
  出席点となるため
  一人が授業を欠席しても，
  点数が減点されることがない点である．
  これは，一つ目に述べた要因より酷い例であり，
  日にち毎に出席する担当を決めることで
  授業に出席，参加すらしない場合があった．

結果的に学生的視点から見ると、
この授業はPMといった考え方を気づかせる授業ではなく
「授業に出なくても良い楽に単位を取れる授業」
という風に見受けられた．

個人での学習よりも互いに高め合い，
知識・スキルを習得するといったペアは一部であり，
優秀な学生と，そうでない学生がペアを組んだ場合，
前者がほとんどの課題をこなし，
後者はほとんど考えないというパターンも存在した．

学習の目的を
active learningやproject based learningなどでは
共同学習のスキル習得としてごまかすこともあるが，
演習ではスキルがついてなければ学習したとは言い難い．
ここで教育の非対称性，
- 教える側はどう役にたつかを知っているが，
- 教わる側は，知識を獲得するまでわからない．
が起こっている．

新しい徒弟制度的な学習であっても，
ゼミの目的が変わるわけではない．
しかし，役に立つスキルの定義が
学生には習得前にはわからない．
ならば，「単位取得という脅しで縛りましょう」
となるが，それでは伝統的な徒弟制と変わりはない．
どうすれば，研究が役に立つことに学生が気づくのか,
あるいは気づかせることができるのかが問題となる．
以下では，その目標に近づくことを目指して
システムを考える．

* 構築システムのアイデア
「新しい徒弟制」という視点に立って，研究室運用システムとして
- 日々の個人活動を構成員に公開する(blogシステム)
- ペアによる個別指導(遠隔ペアプロ)
- 欠席者のフォロー(スタンプ集め)
という機能の提供を当初の目標とした．

** blogシステム

#+caption: blog作成から公開までの流れ．
#+name: fig:myhelp_to_jekyll
#+ATTR_LATEX: :placement [btp]
[[file:./images/myhelp_to_jekyll.png]]

学生個人のゼミ活動はゼミ発表などであるが，
より細かな活動を記録することが望ましい．
実験系の研究室では，研究室ノートや実験ノートなどで
日々の活動を記録する習慣をつけるが，
プログラミングを主体とする研究室においては
何行書いたを聞く指導教員もいる．
より良いプログラマの習慣は，
活動記録としてblogの公開が推奨されている．
これによって，
- どのようなアイデアで
- どこで何を調べて
- どこで挫折したか
などを公開することで，codingがうまくいかなかったとしても，
思考の過程を記録し，先輩や同僚のcode reviewを通じて，
programming skillの向上が期待される．
また会社においては，これは日報にも通じている．

研究室内の活動においても実践可能なblogシステムを目指して，
- my_help
- org-mode
- Jekyll
のそれぞれの機能を利用して実装した．
blogの作成から公開までの流れは図[[fig:myhelp_to_jekyll]]のようになる．

*** my_help = 直交補空間
my_helpはRubygemsで提供されている. 
知識の量が増えると，それを書き留めたメモやレポートが増え，
ファイル構造にchunkingの必要が出てくる．
ところが，chunkingすることにより，ディレクトリ構造が深くなる．
その結果，レポートやメモの場所が把握できなくなる．
これに対して，my_helpは直交補空間を実現した知識構築を補助するツールである．
ディレクトリに拘束される事なく，
メモやレポートを作成・管理できるという利点があるため，
どこからでもアクセスできる．
my_helpではblog形式で文書を作成し，構成員に公開する内容を記述する．

*** org-mode = 便利なmark down
org-modeは，Emacs上で動作する
プレーンテキストの文書作成環境である．
HTMLやLaTeXへの変換等が可能であり，
ノートやメモの作成，TODOリストの管理，
発表資料，スライドの作成など様々な用途に対応している．
また，コードの実行の他，テーブル表記の入力，
図や表の表示，ライブ計算，
機能も兼ね備えている\cite{Org-mode}．
blog文書の記述言語をorg-modeに統一することで
一括した変換が可能となる．

*** Jekyll = 晒すと何がいい？
my_helpはemacsのorg-modeを利用しているが，個人での使用を
前提としており，公開するためのシステムが存在しない．
JekyllはRubygemsで提供されている静的サイトジェネレーターである．
テーマや構成を変更することができ，好みのサイトを作成できる．
GitHubには，Jekyllで作成されたサイトを公開する
GitHub Pagesというサービスが用意されている．
 
my_helpで作成されたblogを，Jekyllに連携することで，
localにおいてそのプレビューを確認することができる．
また，git pushするだけでGithub Pagesでworld wideに公開される．

** 遠隔ペアプロ
ペアの活動や欠席者の遅れをフォローするシステムを提供する．
現在，ゼミを中心とした，個別の時間調整を行っている．
しかし，１週間学校に来れない人もいるため，
それを援助すべく遠隔でもペアプロや知識の共有をする．

ペアプロが機能する理由は，
#+begin_quote
ただ始めること．これがたぶん生産性の鍵なのだ．
ペアプロが機能する理由は，「相方とペアプロ作業を予定する」ことで，
「作業を始めることをお互いが強制する」からに違いない
(原文より訳出)\cite{Joel}．
#+end_quote
であるとされており，空間を共有する必要はない．

キャンパスが郊外にあるため，効率的にゼミの研究を進めるためには，
遠隔での共同作業が不可欠である．そこで，いくつかの環境を使って
実際の作業を試行して，結果を収集する．

そのような環境で必要となる仕様は，新しいタイプの徒弟制の視点に立って，
1. 先輩と後輩によるペアプロ
1. コードのリアルタイム共有
1. 音声，ポインタなどによる指示
1. 作業記録，振り返り

などが効率的に行えることである．

これらを踏まえ，遠隔でもリアルタイムで共同編集できる環境の
有力な候補として，Teletype for AtomとVisual Studio Live Shareがある．
Teletype for Atomは，ホストがKeyを発行し，
そのKeyによってメンバーが参加できる．
参加すると，メンバーのカーソルが表示され，
リアルタイムでコードの編集やコメントを書く事ができる．
また，メンバーが退出しても，ホスト側に記録が残るようになっている\cite{Atom}．
Visual Studio Live Shareも，
遠隔で複数人がリアルタイムに
コード編集，ブレークポイント，デバッガ操作を共有できる環境である\cite{VSC}．

Visual Studio Live ShareとTeletype for Atomの違いは，
編集できるファイルの数である．
Type for Atomは，ホストが開いた１つのファイルのみ編集が
可能であるが，Visual Studio Live Shareはフォルダ全体
をリアルタイム編集可能である．
また，Keyの発行がshareボタン一つでできる点や，
ブレークポイントを設定し，コードの実行を共有できる点は
Visual Studio Live Shareの特徴である\cite{VSCReview}．

** スタンプ集め
「スタンプ集め」とは，ゼミに欠席した学生のフォローシステムである．
構成員は教授者と学習者の両方に成り得るものとし，欠席者は
ゼミ出席者を教授者とし，ゼミの内容や課題を教えてもらう学習者とする．

学習者は，教授者に教えてもらいながら，
課題に取り組むとともに，blogを作成し，知識定着をはかる．
課題達成後は教授者が学習者のスタンプを押す．
そのスタンプが，課題達成の証明となり，卒業するまでの必須
課程とする．
また，学習者でも教授者にスタンプを押してもらうと，
教授者としての資格を獲得し，
他の学習者に教える事ができ，課題達成後はスタンプを押す．
課題ごとにスタンプを用意し，全てのスタンプの取得が卒業の必須項目としている．
このようなプロセスにより，教えることによる記憶強化が期待できる．
また，不明瞭な点のあぶり出しが教える側でも可能になる．
このようなプロセスを自動化するシステムの構築を目指す．

* まとめ
ゼミの目的を「研究する学生」と再定義した上で，
旧来のacquisition metaphorしか知らない学生に，
participation metaphorで知識習得することを強制する
システムの構築を目標とした．
「新しい徒弟制」の構築という視点に立って，
- 日々の個人活動を構成員に公開する(blogシステム)
- ペアによる個別指導(遠隔ペアプロ)
- 欠席者のフォロー(スタンプ集め)
という機能を提供するシステムornbを構築している．

\begin{thebibliography}{99}
\bibitem{Ushiogi_column} 潮木守一: 「フンボルト理念」とは神話だったのか？-自己理解の"進歩"と"後退"; アルカディア学報（教育学術新聞掲載コラム），https:\slash\slash{}www.shidaikyo.or.jp\slash{}riihe\slash{}research\slash{}arcadia\slash{}0246.html, (accessed on 8 July 2019).
\bibitem{Ushiogi} 潮木守一: フンボルト理念の終焉？現代大学の新次元; 東信堂, 2008.
\bibitem{Bell} Bell, S. : Project-Based Learning for the 21st Century: Skills for the Future; The Clearing House: A Journal of Educational Strategies， Issues and Ideas， vol. 83， no. 2， pp. 39–43， (2010)．
\bibitem{Settles} Settles, B. : Active Learning Literature Survey’; University of Wisconsin-Madison Department of Computer Sciences， Technical Report， (2009)．
\bibitem{溝上} 溝上慎一: アクティブ・ラーニング導入の実践的課題; 名古屋高等教育研究，第7号，pp．269--287 (2007).
\bibitem{Org-mode} Org mode for Emacs: あなたの生活をプレーンテキストで，https://orgmode.org/ja/ (accessed on 10 Feb 2019)．
\bibitem{LaveWenger} ジーン・レイブ, エティエンヌ・ウェンガー, 佐伯胖訳, 福島正人解説: 状況に埋め込まれた学習, 正統的周辺参加; 産業図書, 1993.
\bibitem{Sfard} Sfard, A. : On Two Metaphors for Learning and the Dangers of Choosing Just One; Educational Researcher, 27(1998), 413.
\bibitem{DegreeApprenticeship} press release: Government rolls-out flagship Degree Apprenticeships; https:\slash\slash{}www.gov.uk\slash{}government\slash{}news\slash{}government-rolls-out-flagship-degree-apprenticeships, (accessed on 8 July 2019).
\bibitem{Joel} Spolsky, J.，青木靖訳: Joel on software; オーム社，2005, p. 133．
\bibitem{Atom} 【リアルタイム共同編集】Atomで出来るようになったってよ - Qiita; https:\slash\slash{}qiita.com\slash{}k-waragai\slash{}items\slash{}a372800c262f56fe688a (accessed on 7 July 2019)．
\bibitem{VSC}  ［速報］「Visual Studio Live Share」発表。複数のプログラマがリアルタイムにコードの編集、ブレークポイント、デバッガ操作などを共有。; https:\slash\slash{}www.publickey1.jp\slash{}blog\slash{}17\slash{}visual\_studio\_live\_shareconnect\_2017.html (accessed on 7 July 2019)．
\bibitem{VSCReview} リアルタイムでコードの共同編集ができる、Visual Studio Live Shareを使ってみた（パブリックプレビュー版）; http:\slash\slash{}yfp5521.hatenablog.com\slash{}entry\slash{}vscode-liveshare (accessed on 7 July 2019)．
\end{thebibliography}

* COMMENT その他

** 客観的な事実の記述
- merit見えない， demerit時間が取られる
- 西谷研究室では，生徒の出席率が悪い．
  これの原因は，他人任せであることが一番大きい．
  「誰かが出席していれば，なんとかしてくれる」，
  「欠席による出席者より理解が遅れるという危機感の無さ」，
  「プライベートとゼミとの優先順位がおかしい」
  等が挙げられる．

  卒業研究やゼミにおいても，教授や先輩が後輩に計算機の使い方や，
  プログラミング，レポートの書き方を教える．
  この時，後輩は自らの意思で参加するという考え方であるべきだ．
  西谷研究室では，後輩が参加者となり先輩から学ぶという風潮が見受けられない．
  後輩は，卒業研究を発表すること，
  結果のみを考えており，卒業研究を発表するまでの過程の重要性に気づいていない．

** 新しい徒弟制と古い徒弟制，西谷研でどうするよ？
- このような参加型の学習を西谷研で実践するのに何が必要か？
- 徒弟制の本質
- 親方と徒弟の関係
  - 古いよね
  - 見習い？
  - 習慣
- 先輩の仕事
- 硬い上下関係ではなく，参加して学ぶ
- 徒弟のモチベーション，参加意欲
- 教える方も，確固とした知識として身につけることができる
- 今まで何で，教えなかった
- ダンスはあるけど，
- 後輩と勉強する機会がない
- そういう機会がないから
- 優先順位がおかしい
- 共同体への参加というのを気づいていなかった．
- 同じやろ
- 声かけ
- 目に見える形にして共有する

学べる人はどこでも学べる？


** [o] 日報
- 自分がやったことの記録
- blogはそのつもり
- 見た目って大事
- 手軽にできる
- org
- my_help

** [x] 罰を与える？　
- 卒業はなし
- 恥ずかしい
- 何をするとしでかしたと思う？
- 名指しで言われる
- 全体の目が通るところで糾弾
- てのはめんどいんで，スタンプ集めに変更
- 糾弾せよ！！！自己批判せよ！！！
** [ ] チームによる課題達成
- こいつをシステムにする？
- こいつを徒弟制にする？
- こいつをPMの実践に昇華する
** [ ] 卒業研究や授業の課題において，その過程が重要である．
# 学生は，PMの考え方や過程の重要性に気づかない事が多いが，数式計算処理演習を受けた学生に，ペアで聞くと，「他人事だと思っているから」，「興味のない授業であるから」，「自分が学んでいることとの関連性を見出せないから」という様な意見を得た．

自ら行った事を過程も含めてレポートとしてまとめ，公開することで，知識構築に繋がると考える．
レポートにまとめることは，それらの過程も含めて理解する必要がある．また，自らの復習となり，より知識として身につく．
次に，公に公開することで，日本語や文の構築に気を使うため，学んだことの理解だけでなく，レポート作成の知識も身につくといった利点がある．
また，公開することで他の人から指摘や意見をもらうことができるため，そこで議論を広げることで，
より知識が定着する．
これらを実現するために，org-mode，ruby，my_help，Jekyll，GitHub Pagesを用いて過程の重要性を気づかせるシステムを提案する．

** [ ] スイッチ
- 象(感情)と象使い(理性)
- サボっているように見えて，実は混乱している
- 双曲性の話
- 縛る
- defaultを変える


** [x] repl == jupyter notebook
てのは試行錯誤．
loopがある．
Jekyllとか，github， と結びつけて，システムにならないか？


** レポートの作成と公開

次に，レポートの作成について述べる．
レポートの作成はRubygemseで提供されている，
my_helpを用いる．

my_helpを以下の方法でインストールする．
#+begin_quote
  #+begin_example
  gem install my_help
  #+end_example
#+end_quote

次に，my_helpにblogというlistを作成するために，
以下のコマンドを実行する．

#+begin_quote
  #+begin_example
  my_help new blog
  #+end_example
#+end_quote

これで新しいlistが作成される．
次にblogの内容を編集するため，以下を実行する．
#+begin_quote
  #+begin_example
  my_help edit blog
  #+end_example
#+end_quote

編集画面では，タイトルをつけた後，タイトルの横に
図[[fg:add_date]]のような日付を付けることとする．
#+caption: 日付を付ける例
#+name: fg:add_date
#+ATTR_LATEX: :width 8cm
[[file:．/images/add_date．png]]

また，以下のコマンドで日付を付ける事が出来る．
#+begin_quote
  #+begin_example
  Control-u Control-c ．
  #+end_example
#+end_quote

あとは，Blogの内容を書き込んでいく．

** Jekyllのインストールと実行
Blogの作成と公開はJekyllとGithub Pagesを用いる．
以下にその手順を記述する．
[[https://qiita．com/daddygongon/items/9b7182db29861744fc79][jekyllのinstallとGitHub Pagesとの連携]]

はじめに，Jekyllをインストールする．
#+begin_quote
  #+begin_example
  gem install bundler jekyll
  #+end_example
#+end_quote

次にローカルサーバを立ち上げる．
#+begin_quote
  #+begin_example
  jekyll new my-awesome-site
  cd my-awesome-site
  bundle exec jekyll serve
  #+end_example
#+end_quote
